//
//  LocationListPresenter.swift
//  LocationFinder
//
//  Created by Monali on 22/06/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol LocationListPresentationLogic {
    func presentFetchedLocations(response: LocationList.FetchLocations.Response)
    func presentError(response: LocationList.ErrorResponse)
    func presentValidationError(message: String)
}

class LocationListPresenter: LocationListPresentationLogic {
    weak var viewController: LocationListDisplayLogic?

    // MARK: - Public API
    init(view: LocationListDisplayLogic? = nil) {
        self.viewController = view
    }
    
    // MARK: Parse and calc respnse from LocationListInteractor and send simple view model to LocationListViewController to be displayed

    func presentFetchedLocations(response: LocationList.FetchLocations.Response) {
        
        let displayedLocation = response.locations.compactMap { location in
            LocationList.FetchLocations.ViewModel.DisplayedLocation(lat: location.lat ?? 0.0, name: location.name ?? "", long: location.long ?? 0.0)
        }
                                                              
        viewController?.displayFetchedLocations(viewModel: LocationList.FetchLocations.ViewModel(displayedLocations: displayedLocation))

    }
    
    
    func presentError(response: LocationList.ErrorResponse) {
        guard case let LocationListError.serviceFailed(message) = response.error else {
            fatalError("Unable to transform service error response.")
        }
        
        let viewModel = LocationList.ErrorViewModel(errorTitle: "Error", errorMessage: message)
        viewController?.displayError(viewModel: viewModel)
    }
    
    func presentValidationError(message: String) {
        let viewModel = LocationList.ErrorViewModel(errorTitle: "Error", errorMessage: message)
        viewController?.displayError(viewModel: viewModel)
    }
    
    func presentValidationError(validationMsg: String) {
        let viewModel = LocationList.ErrorViewModel(errorTitle: "Error", errorMessage: validationMsg)
        viewController?.displayError(viewModel: viewModel)
    }
}
