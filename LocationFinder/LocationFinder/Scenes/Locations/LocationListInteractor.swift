//
//  LocationListInteractor.swift
//  LocationFinder
//
//  Created by Monali on 22/06/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol LocationListBusinessLogic {
    func fetchLocations(request: LocationList.FetchLocations.Request)
    func openWikipediaApp(location: LocationList.FetchLocations.ViewModel.DisplayedLocation)
    //func validate(latitude: UITextField, longitude: UITextField)
    func validate(latitude: String, longitude: String)
}

protocol LocationtValidationLogic {
    //var name: String { get set }
}

class LocationListInteractor: LocationListBusinessLogic {
    
    var presenter: LocationListPresentationLogic
    private var locations: locationsResponseModel = locationsResponseModel(locations: [])
    lazy var worker: LocationsWorkingLogic = LocationListWorker()

    init(presenter: LocationListPresentationLogic = LocationListPresenter()) {
        self.presenter = presenter
    }


    // MARK: Do something (and send response to LocationListPresenter)

    func fetchLocations(request: LocationList.FetchLocations.Request) {
        
        worker.fetchLocations(request: request) { result in
            switch result {
            case .success(let locations):
                
                self.locations = locations
                let response = LocationList.FetchLocations.Response(locations: (self.locations.locations))
                self.presenter.presentFetchedLocations(response: response)
                
            case .failure(let error):
                let errorResponse = LocationList.ErrorResponse(error: .serviceFailed(error.localizedDescription))
                self.presenter.presentError(response: errorResponse)
            case .none:
                break
            }
        }
    }
    
    func openWikipediaApp(location: LocationList.FetchLocations.ViewModel.DisplayedLocation) {

        self.getLocationName(location: location) { cityName in
            DeepLinkHelper.deepLinkToWikiApp(city: cityName ?? "")
        }
    }
    
    func getLocationName(location: LocationList.FetchLocations.ViewModel.DisplayedLocation, completion: @escaping (_ city: String?) -> ()) {
        let cityName = location.name
        if cityName.isEmpty {
            let location = CLLocation(latitude: location.lat, longitude: location.long)
            location.fetchCityAndCountry { city, error in
                completion(city)
            }
        }
        else {
            completion(cityName)
        }
    }
}

extension LocationListInteractor: LocationtValidationLogic {
    
    func validate(latitude: String, longitude: String) {
        do {
            let latitude = try latitude.validatedText(validationType: .requiredField(field: "latitude"))
            let longitude = try longitude.validatedText(validationType: .requiredField(field: "longitude"))

            let data = LocationList.FetchLocations.ViewModel.DisplayedLocation(lat: Double(latitude) ?? 0.0, name: "", long: Double(longitude) ?? 0.0)
            save(data)
        } catch(let error) {
            presenter.presentValidationError(message: (error as! ValidationError).message)
        }
    }
    
    func save(_ data: LocationList.FetchLocations.ViewModel.DisplayedLocation) {
        openWikipediaApp(location: data)
    }
}
